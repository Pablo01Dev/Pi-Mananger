import Imovel from '../models/Imovel.js';
import mongoose from 'mongoose';

// ==================================================
// üè† Criar im√≥vel
// ==================================================
export const criarImovel = async (req, res) => {
  try {
    const { titulo, descricao, status, endereco } = req.body;

    if (!titulo || titulo.trim() === '') {
      return res.status(400).json({ erro: 'O campo t√≠tulo √© obrigat√≥rio.' });
    }

    const novoImovel = new Imovel({
      titulo,
      descricao: descricao || '',
      endereco: endereco || '', // ‚úÖ novo campo
      status: status || 'cadastrar',
    });

    await novoImovel.save();
    res.status(201).json({ sucesso: true, imovel: novoImovel });

  } catch (err) {
    console.error('[ERRO] Erro ao criar im√≥vel:', err);
    res.status(500).json({ erro: 'Erro ao criar im√≥vel: ' + err.message });
  }
};

// ==================================================
// üîÑ Atualizar status do im√≥vel
// ==================================================
export const atualizarStatus = async (req, res) => {
  const { id } = req.params;
  const { status } = req.body;

  if (!mongoose.Types.ObjectId.isValid(id)) {
    return res.status(400).json({ erro: 'ID inv√°lido.' });
  }

  const statusValidos = ['cadastrar', 'fazer video', 'fazer tour 360¬∫', 'conclu√≠do', 'disponivel'];
  if (!statusValidos.includes(status)) {
    return res.status(400).json({ erro: 'Status inv√°lido.' });
  }

  try {
    const imovel = await Imovel.findById(id);
    if (!imovel) return res.status(404).json({ erro: 'Im√≥vel n√£o encontrado.' });

    imovel.status = status;
    await imovel.save();

    res.status(200).json({ sucesso: true, imovel });
  } catch (err) {
    console.error('[ERRO] Erro ao atualizar status:', err);
    res.status(500).json({ erro: 'Erro ao atualizar status: ' + err.message });
  }
};

// ==================================================
// üìã Listar im√≥veis
// ==================================================
export const listarImoveis = async (req, res) => {
  try {
    const imoveis = await Imovel.find({});
    res.status(200).json(imoveis);
  } catch (err) {
    console.error('[ERRO] Erro ao listar im√≥veis:', err);
    res.status(500).json({ erro: 'Erro ao listar im√≥veis: ' + err.message });
  }
};

// ==================================================
// üóë Deletar im√≥vel
// ==================================================
export const deletarImovel = async (req, res) => {
  const { id } = req.params;

  if (!mongoose.Types.ObjectId.isValid(id)) {
    return res.status(400).json({ erro: 'ID inv√°lido.' });
  }

  try {
    const imovel = await Imovel.findById(id);
    if (!imovel) {
      return res.status(200).json({ sucesso: true, mensagem: 'Im√≥vel j√° removido.' });
    }

    await Imovel.findByIdAndDelete(id);
    res.status(200).json({ sucesso: true, mensagem: 'Im√≥vel removido com sucesso.' });
  } catch (err) {
    console.error('[ERRO] Erro ao deletar im√≥vel:', err);
    res.status(500).json({ erro: 'Erro ao excluir im√≥vel: ' + err.message });
  }
};

// ==================================================
// ‚úèÔ∏è Atualizar dados gerais do im√≥vel
// ==================================================
export const atualizarImovel = async (req, res) => {
  const { id } = req.params;
  const dadosAtualizados = req.body;

  if (!mongoose.Types.ObjectId.isValid(id)) {
    return res.status(400).json({ mensagem: 'ID inv√°lido.' });
  }

  try {
    const imovel = await Imovel.findByIdAndUpdate(id, dadosAtualizados, { new: true });
    if (!imovel) return res.status(404).json({ mensagem: 'Im√≥vel n√£o encontrado.' });
    res.json(imovel);
  } catch (err) {
    console.error('[ERRO] Erro ao atualizar im√≥vel:', err);
    res.status(500).json({ mensagem: 'Erro ao atualizar im√≥vel.' });
  }
};

// ==================================================
// ‚Üï Atualizar ordem dos im√≥veis
// ==================================================
export const atualizarOrdem = async (req, res) => {
  const { novaOrdem } = req.body;
  if (!Array.isArray(novaOrdem) || !novaOrdem.length) {
    return res.status(400).json({ message: 'Array novaOrdem inv√°lido.' });
  }

  try {
    const operacoes = novaOrdem.map((item, i) =>
      mongoose.Types.ObjectId.isValid(item._id)
        ? Imovel.findByIdAndUpdate(item._id, { ordem: i })
        : null
    ).filter(Boolean);

    await Promise.all(operacoes);
    res.status(200).json({ message: 'Ordem atualizada com sucesso!' });
  } catch (err) {
    console.error('[ERRO] Erro ao atualizar ordem:', err);
    res.status(500).json({ message: 'Erro ao atualizar ordem.' });
  }
};

// ==================================================
// üîé Buscar √∫ltimo im√≥vel
// ==================================================
export const buscarUltimoImovel = async (req, res) => {
  try {
    const ultimo = await Imovel.findOne().sort({ ordem: -1 });
    if (!ultimo) return res.status(404).json({ message: 'Nenhum im√≥vel encontrado.' });
    res.json(ultimo);
  } catch (err) {
    console.error('[ERRO] Erro ao buscar √∫ltimo im√≥vel:', err);
    res.status(500).json({ message: 'Erro ao buscar √∫ltimo im√≥vel.' });
  }
};
